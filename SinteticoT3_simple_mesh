```matlab

clear all; close all;
% setting some default plot options
set(0,'DefaultAxesFontName','Times','DefaultAxesFontSize',14);
set(0,'defaultPatchEdgeColor',[0.5,0.5,0.5]);
set(0,'defaultPatchFaceColor','none');
set(0,'defaultFigureColormap',hot(64));


% specify the path to the Correli folder
Correlipath = fullfile('/home/vfsciuti/Documents/Correli/T3/Correli_framework');
% For example:
% Correlipath = 'C:\MyDocuments\Correli';

% this adds the correct folder to the matlab path
addpath(fullfile(Correlipath,'ml_lib_core'));

% ====================================================
% Experimental Data
% ====================================================

% images
imagepath = fullfile('/home/vfsciuti/Documents/Correli/T3/Teste-sintetico-T3');
imagefiles = dir(fullfile(imagepath,'new_*.tif'));
imagefiles = {imagefiles.name}';
images = strcat(imagepath,filesep,imagefiles);
Nim = length(images);
Ninc = Nim - 1;


% Loading an image
% -------------------------------------
% images
imagefile = images{1};

% load the reference image
fbit = 2^16;
f = imread(imagefile);
frgb = ind2rgb(f,gray(fbit));
[n,m] = size(f);
f = single(f);

dynamicrange = max(f(:)) - min(f(:));
fprintf('Dynamic range of f: %g [GV] \n',dynamicrange);


% =============================================================
%Generating a structured mesh
% =============================================================

for i = 1:2
% number of nodes (x,y)
Nnod = [i*4,i*4];

% create node coordinates from a to b, with the edge elements a factor c
% bigger than the internal elements
ax = 0.10;
bx = 0.90;  % 0 and 1 if images were cut before
ay = 0.10;
by = 0.90;
c = sqrt(2);
L = c./(2+Nnod-3);
nodex = ax*m + (bx-ax)*m*[0, linspace(L(1),1-L(1),Nnod(1)-2), 1];
nodey = ay*n + (by-ay)*n*[0, linspace(L(2),1-L(2),Nnod(2)-2), 1];

% Let's create a structured mesh for regular DIC
Msh = mesh_gen_structured(nodex,nodey,'T3');
Nn = numel(Msh.nodes);
A = mesh_area2D(Msh,'nodes');

% plot the mesh on the image
figure('Position',[50 50 600 400])
imagesc(f)
h = mesh_plot(Msh,'Show','NodeArea','Wireframe',true);
daspect([1 1 1]);
title('Element Area per node')
colorbar
drawnow

Mesh(i) = Msh;

end

% ==========================
% DIC without BCR
% ==========================
 % DIC options
        options.outputs = 'NR';              % store the residual image R and the right hand member F
        options.conv_limit = 1e-3;           % consider converged when the iterative nodal displacements are smaller then X
        options.trustregion = 2;             % limit the iterative nodal displacement to N pixels
        options.initreg = 1e-4;              % penalize solutions which are far from the initial guess (relative to the largest eigenvalue of M)
        options.verbose = 0;                 % how much info to write during correlation
        options.bestit = true;               % use the iteration with the lowest residual (instead of the last)
        % options.interp = 'Bicubic';        % image interpolation method
        
        k = 1;
        CG(k).sps  = 5;                      % apply superpixel averaging (blurs and makes the computations cheaper) 
        CG(k).blur = 3;                      % apply a gaussian blur to the image (helps with the gradient and reduces local minima)
        CG(k).mesh = 1;                      % which mesh to use
        CG(k).conv_limit = 1e-3;             % consider converged when the iterative nodal displacements are smaller then X
        CG(k).initreg = 1e-2;                % penalize solutions which are far from the initial guess (relative to the largest eigenvalue of M)

        % Step 2
        k = k + 1;
        CG(k).sps = 2;
        CG(k).blur = 2;
        CG(k).mesh = 2;
        CG(k).conv_limit = 1e-3;
        CG(k).initreg = 1e-2;

        % Step 3
        k = k + 1;
        CG(k).sps = 1;
        CG(k).blur = 0;
        CG(k).mesh = 2;
        CG(k).conv_limit = 1e-3;
        CG(k).initreg = 0;


        % readable convergence state
        cstate{1,1} = '';
        cstate{2,1} = ', max. iter.';
        cstate{3,1} = ', div.';
        
        
% initial guess

% Nn = numel(Mesh(1).nodes);
% init = zeros(Nn,3);
% 
% init(:,1) = ones(Nn,1)*10 ;

% ==========================
% prepare an initial guess using fft
% ==========================

f = single(imread(images{1}));
g = single(imread(images{2}));
init = correlate_2D_fft(f,g,Mesh(1));

Mesh_DIC = Mesh(end); %structure to storage all the mesh data including the results


  
    
% the DIC loop
        for inc = 1:Ninc
            
            % load the deformed image
            
            if inc > 1 %image update Preciso somar incremental?
            f = imread(imagefiles{inc});
            f = single(f);
            end
            
            g = imread(imagefiles{inc+1});
            g = single(g);
            
          
%             if inc > 1
%                 
%                 init = allcor{inc-1,1}(1).U;
%                 
%             end
            
            cor = dicsequence(f,g,options,CG,Mesh,init);
            
            allcor{inc,1} = cor(end);
            
            Mesh_DIC.fieldsnodes.U{inc} = cor(end).U;  % store the nodal displacement for all images
            Mesh_DIC.fieldsnodes.ResFinal{inc} = cor(end).R;  % store the nodal residual for all images
            
            
            % store the rms residual for all images
           % Mesh_DIC.res{inc} = cor.s(4);

            
            
        end

        

    % compute the strain (on the nodes)
   % Mesh_DIC.fieldsnodes.U = Mesh_DIC.U;
    
    Egp = mesh_strain2D(Mesh_DIC); %computa Green lagrange no pontos de Gauss mas pode computar outras deformacoes
    
    E = mesh_gp2node(Mesh_DIC,Egp);
    
%     for i = 1: Ninc
%         
%         
%         % equivalent strain
%         Etr{i} = E{i}(:,1) + E{i}(:,2);
%         Exxd{i} = E{i}(:,1) - (1/3)*Etr{i};
%         Eyyd{i} = E{i}(:,2) - (1/3)*Etr{i};
%         Eeq{i} = sqrt( (2/3) * (Exxd{i}.^2 + Eyyd{i}.^2 + 2*E{i}(:,4).*E{i}(:,4)) );
%         
%         
%     end
    
  
    % normalized RGB version of the residual
    % normalize between 0 and 1
    imnorm = @(x) (double(x) - min(x(:)))./(max(x(:))-min(x(:)));
    Rrgb = ind2rgb(uint16(64*imnorm(Mesh_DIC.fieldsnodes.ResFinal{Ninc})),gray(64));

% ==========================
% Ploting
% ==========================



 % plot the mesh on the image
    figure('Position',[10 10 1000 500])
    subplot(1,3,1);
    imagesc(frgb);hold on
    h = mesh_plot(Mesh_DIC,'Field',Mesh_DIC.fieldsnodes.U)%,'Wireframe',true);
    daspect([1 1 1]);
    title('Ux Uy Uz')
    colorbar
    subplot(1,3,2);
    imagesc(frgb);hold on
    h = mesh_plot(Mesh_DIC,'Field',E)%,'Wireframe',true);
    daspect([1 1 1]);
    title('ex ey exy eyx')
    colorbar
    
    subplot(1,3,3);
    imagesc(Rrgb)
    daspect([1 1 1]);
    title('Final Res')
    drawnow
    
```

